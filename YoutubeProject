#Almost increase Sequeence
def solution(sequence):
    count_removed = 0
    for val in range(1, len(sequence)):
        if sequence[val] <= sequence[val - 1]:
            count_removed += 1
            if val > 1 and sequence[val] <= sequence[val - 2]:
                sequence[val] = sequence[val - 1]

    return count_removed <= 1


# Matrix Element sum
def solution(matrix):
    return sum(matrix[cost_rooms][free_rooms] for free_rooms in range(len(matrix[0]))   
for cost_rooms in range(len(matrix)) if matrix[cost_rooms][free_rooms]!=0 and
all(matrix[k][free_rooms] for k in range(cost_rooms)))


# All longest Strings
def solution(inputArray):
    return [words for words in inputArray if len(words) == max(len(words) for words in inputArray)]

#common Character in string
def solution(s1, s2):
    return sum(min(s1.count(char),s2.count(char)) for char in set(s1))

# isLUcky number
def isLucky(n):
    n_str = str(n)
    half_len = len(n_str) // 2
    first_half_sum = sum(int(digit) for digit in n_str[:half_len])
    second_half_sum = sum(int(digit) for digit in n_str[half_len:])
    return first_half_sum == second_half_sum


