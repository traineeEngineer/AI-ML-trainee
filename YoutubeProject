#Almost increase Sequeence
def solution(sequence):
    count_removed = 0
    for val in range(1, len(sequence)):
        if sequence[val] <= sequence[val - 1]:
            count_removed += 1
            if val > 1 and sequence[val] <= sequence[val - 2]:
                sequence[val] = sequence[val - 1]

    return count_removed <= 1


# Matrix Element sum
def solution(matrix):
    return sum(matrix[cost_rooms][free_rooms] for free_rooms in range(len(matrix[0]))   
for cost_rooms in range(len(matrix)) if matrix[cost_rooms][free_rooms]!=0 and
all(matrix[k][free_rooms] for k in range(cost_rooms)))


# All longest Strings
def solution(inputArray):
    return [words for words in inputArray if len(words) == max(len(words) for words in inputArray)]

#common Character in string
def solution(s1, s2):
    return sum(min(s1.count(char),s2.count(char)) for char in set(s1))

# isLUcky number
def isLucky(n):
    n_str = str(n)
    half_len = len(n_str) // 2
    first_half_sum = sum(int(digit) for digit in n_str[:half_len])
    second_half_sum = sum(int(digit) for digit in n_str[half_len:])
    return first_half_sum == second_half_sum

# sort by height
def solution(a):
   people=sorted([height for height in a if height!=-1])
   return [-1 if height==-1 else people.pop(0) for height in a ]

# reverse in paranthesis
def solution(inputString):
    for s in range(len(inputString)):
        if inputString[s]=='(':
            start=s
        if inputString[s]==')':
            end=s
            return solution(inputString[:start]+inputString[start+1:end][::-1]+inputString[end+1:])
    return inputString        

HACKER RANK SOLUTION
#List comprehension
if __name__ == '__main__':
    x = int(input())
    y = int(input())
    z = int(input())
    n = int(input())
    print(list([i,j,k] for i in range(x+1) for j in range(y+1) for k in range(z+1)  if i+j+k !=n))

#Check Leap Year
def is_leap(year):
    leap = False
    # Write your logic here
    if year%4==0:
        leap=True
        if year%100==0:
            if year%400==0:
                leap= True
            else:
                leap=False    
    return leap

# find ruunner up_score
if __name__ == '__main__':
    n = int(input())
    arr = map(int, input().split())
    print(sorted(set(arr),reverse=True)[1])

#swap_Case
def swap_case(s):
    return s.swapcase()

#list operation
f __name__ == '__main__':
    N = int(input())
    L=[]
    for i in range(0,N):
        cmd=input().split()
        if cmd[0]=='insert':
            L.insert(int(cmd[1]),int(cmd[2]))
        elif cmd[0]=='append':
            L.append(int(cmd[1]))
        elif cmd[0]=='pop':
            L.pop()    
        elif cmd[0]=='print':
            print(L)
        elif cmd[0]=='remove':
            L.remove(int(cmd[1]))    
        elif cmd[0]=='sort':
            L.sort()
        else:
            L.reverse()  

#Neste List
if __name__ == '__main__':
    a_list=[]
    for _ in range(int(input())):
        name = input()
        score = float(input())
        a_list.append([name,score])
    second_high=sorted(set([score for name,score in a_list]))[1]
    print('\n'.join(sorted([name for name,score in a_list if score==second_high])))

# string mutation
def mutate_string(string, position, character):
    n=list(string)
    n[position]=character
    string=''.join(n)
    return string

#Find Percentage
if __name__ == '__main__':
    n = int(input())
    student_marks = {}
    for _ in range(n):
        name, *line = input().split()
        scores = list(map(float, line))
        student_marks[name] = scores
    query_name = input()
    l=list(student_marks[query_name])
    result=sum(l)/len(l)
    print('%.2f'%result)

#String validator
if __name__ == '__main__':
    s = input()
    print(any(c.isalnum() for c in s))
    print(any(c.isalpha()   for c in s)) 
    print(any(c.isdigit() for c in s))
    print(any(c.lower()   for c in s))
    print(any(c.upper()   for c in s))

#Text Alignment
thickness = int(input()) #This must be an odd number
c = 'H'

#Top Cone
for i in range(thickness):
    print((c*i).rjust(thickness-1)+c+(c*i).ljust(thickness-1))
#Top Pillars
for i in range(thickness+1):
    print((c*thickness).center(thickness*2)+(c*thickness).center(thickness*6))
#Middle Belt
for i in range((thickness+1)//2):
    print((c*thickness*5).center(thickness*6))    
#Bottom Pillars
for i in range(thickness+1):
    print((c*thickness).center(thickness*2)+(c*thickness).center(thickness*6))    
#Bottom Cone
for i in range(thickness):
    print(((c*(thickness-i-1)).rjust(thickness)+c+(c*(thickness-i-1)).ljust(thickness)).rjust(thickness*6))

#text wrap
import textwrap
def wrap(string, max_width):
    return textwrap.fill(string,width=max_width)
if __name__ == '__main__':
    string, max_width = input(), int(input())
    result = wrap(string, max_width)
    print(result)

#design door mat
N,M=map(int,input().split())
for dots in range(N//2):
      j = int((2*dots)+1)
      print(('.|.'*j).center(M, '-'))
print('WELCOME'.center(M,'-'))
for i in reversed(range(N//2)):
    j = int((2*i)+1)
    print(('.|.'*j).center(M, '-'))

#captilize name
def solve(s):
    ans=s.split(' ')
    ans1=(((i.capitalize() for i in ans)))
    return ' '.join(ans1)

#minion game
 n = len(string)
    comb = ((n)*(n+1))/2
    count_k = 0
    count_s = 0
    count_k = sum([len(string[i:]) for i in range(len(string)) if string[i] in "AEIOU"])
    count_s = comb - count_k
    if count_s == count_k:
        print("Draw")
    elif count_s > count_k:
        print("Stuart", int(count_s) )
    else:
        print("Kevin", int(count_k))

#triangle quest
or i in range(1,int(input())+1): #More than 2 lines will result in 0 score. Do not leave a blank line also
    print (((10**i)//9)**2)

#OrderdDict
from collections import OrderedDict
input_=int(input())
a=OrderedDict()
for _ in range(input_):
    item,name,price=input().rpartition(' ')
    a[item]=a.get(item,0)+int(price)
for item,price in a.items():
    print(item,price)

#word Orderd
from collections import Counter
n=int(input())
l1=[input().strip() for _ in range(n)]
result=Counter(l1)
print(len(result))
print(*result.values())

#Collection DEQueue
from collections import deque
D=deque()
for _ in range(int(input())):
    op,val,*args=input().split()+['']
    eval(f'D.{op}({val})')
print(*D)  

#iterable iteration
from itertools import combinations
N=int(input())
L=input().split()
K=int(input())
C=list(combinations(L,K))
F=filter(lambda c :'a' in c,C)
print('{0:.3}'.format(len(list(F))/len(C)))

# divmod
a=int(input())
b=int(input())
print(a//b)
print(a%b)
print(divmod(a,b))

#power mod
a=int(input())
b=int(input())
m=int(input())
C=pow(a,b)
D=C%m
print(int(C))
print(int(D))

#integer come all side
a=int(input())
b=int(input())
c=int(input())
d=int(input())

print(int(pow(a, b))+ int(pow(c, d)))

#check subset
for i in range(int(input())):
    a=int(input())
    set_a=set(map(int, input().split()))
    b=int(input())
    set_b=set(map(int, input().split()))
    if len(set_a.difference(set_b))==0:
        print('True')
    else:
        print('False')

#strict subset
A = set(input().split())
COUNT = 0
VALUE = 0
for i in range(int(input())):
    if A.issuperset(set(input().split())):
        COUNT += 1
    else:
        VALUE += 1
if VALUE != 0:
    print('False')
else:
    print('True')

#Torison angle
import math

class Points(object):
    def __init__(self, x, y, z):
        self.x=x
        self.y=y
        self.z=z

    def __sub__(self, no):
        return Points((self.x-no.x), (self.y-no.y), (self.z-no.z))
         
    def dot(self, no):
        return (self.x*no.x)+(self.y*no.y)+(self.z*no.z)

    def cross(self, no):
        return Points((self.y*no.z-self.z*no.y), (self.z*no.x-self.x*no.z), (self.x*no.y-self.y*no.x))
        
    def absolute(self):
        return pow((self.x ** 2 + self.y ** 2 + self.z ** 2), 0.5)

#set.discord(),pop(),remove()
n = int(input())
s = set(map(int, input().split()))
for i in range(int(input())):
    s1=input().split()
    if s1[0]=='pop':
        s.pop()
    elif s1[0]=='remove':
        s.remove(int(s1[1]))
    elif s1[0]=='discard':
        s.discard(int(s1[1]))
print(sum(s)) 

#set union 
m=int(input())
eng_n=set(input().split())
n=int(input())
fre_n=set(input().split())
print(len(eng_n.union(fre_n)))

#set mutation
len_set=int(input())
storage=set(map(int,input().split()))
op_list=int(input())

for i in range(op_list):
    operation=input().split()
    
    if operation[0]=='intersection_update':
        temp_storage=set(map(int, input().split()))
        storage.intersection_update(temp_storage)
    elif operation[0] =='update':
        temp_storage=set(map(int, input().split()))
        storage.update(temp_storage)     
    elif operation[0]=='symmetric_difference_update':
        temp_storage=set(map(int, input().split()))
        storage.symmetric_difference_update(temp_storage)
    elif operation[0]=='difference_update':
        temp_storage=set(map(int, input().split()))
        storage.difference_update(temp_storage)
    else:
        assert False
print(sum(storage))                        

#zipped
N, X= input().split()
io=list()
for _ in range(int(X)):
    ip=map(float, input().split())
    io.append(ip)
for i in zip(*io):
    print(sum(i)/len(i))

#input()
f __name__=='__main__':
    x, k= map(int, input().strip().split())
    string=input().strip()
    
    if eval(string)==k:
        print('True')
    else:
        print('False')

#Any or All
_=input()
n=input().split()
print(all([int(i)>0 for i in n]) and any([j==j[::-1] for j in n]))

#Detect Float 
import re
pattern=re.compile('^[-+]?[0-9]*\.[0-9]+$')
for _ in range(int(input())):
    print(bool(pattern.match(input())))

#Maximize it
K, M=map(int, input().split())
N=(list(map(int, input().split()))[1:] for _ in range(K))
mx_list=[]
for item in product(*N):
    S=0
    for val in item:
        S+=val**2
    s_max=S% M
    mx_list.append(s_max)
print(max(mx_list)) 

#Dealing with complex
import math

class Complex(object):
    def __init__(self, real, imaginary):
        self.real=real
        self.imaginary=imaginary
        
    def __add__(self, no):
        return Complex(self.real+no.real, self.imaginary+ no.imaginary)
        
    def __sub__(self, no):
        return Complex(self.real-no.real, self.imaginary-no.imaginary)
        
    def __mul__(self, no):
        prodt=complex(self.real, self.imaginary)*complex(no.real, no.imaginary)
        return Complex(prodt.real, prodt.imag) 
        

    def __truediv__(self, no):
        divt=complex(self.real, self.imaginary)/ complex(no.real, no.imaginary)
        return Complex(divt.real, divt.imag)

    def mod(self):
        m= math.sqrt(self.real**2+self.imaginary**2)
        return Complex(m, 0)

    def __str__(self):
        if self.imaginary == 0:
            result = "%.2f+0.00i" % (self.real)
        elif self.real == 0:
            if self.imaginary >= 0:
                result = "0.00+%.2fi" % (self.imaginary)
            else:
                result = "0.00-%.2fi" % (abs(self.imaginary))
        elif self.imaginary > 0:
            result = "%.2f+%.2fi" % (self.real, self.imaginary)
        else:
            result = "%.2f-%.2fi" % (self.real, abs(self.imaginary))
        return result

if __name__ == '__main__':
    c = map(float, input().split())
    d = map(float, input().split())
    x = Complex(*c)
    y = Complex(*d)
    print(*map(str, [x+y, x-y, x*y, x/y, x.mod(), y.mod()]), sep='\n')

#Map and Lambda
cube = lambda x: x**3# complete the lambda function 
def fibonacci(n):
    # return a list of fibonacci numbers
    a, b, c =0, 1, 1
    for _ in range(n):
        yield a
        a, b= b, a+b 

#Validating Email Address
def fun(s):
    # return True if s is a valid email, else return False
    try:
        username, url=s.split('@')
        website, extension= url.split('.')
    except ValueError:
        return False
    if username.replace('-', '').replace('_', '').isalnum() is False:
        return False
    elif website.isalnum() is False:
        return False
    elif len(extension)>3:
        return False
    else:
        return True   

#Athlete Sort
f __name__ == '__main__':
    nm = input().split()
    n = int(nm[0])
    m = int(nm[1])
    arr = []
    for _ in range(n):
        arr.append(list(map(int, input().rstrip().split())))
    k = int(input())
    sorted_arr=sorted(arr, key=lambda x: x[k])
    for row in sorted_arr:
        print(' '.join(str(y) for y in row))

# Reduce Function
from fractions import Fraction
from functools import reduce
def product(fracs):
    t =Fraction(reduce(lambda x, y: x*y,fracs)) # complete this line with a reduce statement
    return t.numerator, t.denominator

# groups(),Group(),GroupDict()
import re
m=re.findall(r'([A-Za-z0-9])\1+', input())
if m:
    print(m[0])
else:
    print(-1)   

#Re.start and Re.Startall()
import re
S = input()
k = input()
pattern = re.compile(k)
r = pattern.search(S)
if not r:
    print("(-1, -1)")
while r:
    print("({0}, {1})".format(r.start(), r.end() - 1))
    r = pattern.search(S, r.start() + 1) 


@ Regx substitution
import re
for i in range(int(input())):
    print(re.sub(r'(?<= )(&&|\|\|)(?= )', lambda x: 'and' if x.group()=='&&' else 'or', input()))

#validate Roman Numbers
regex_pattern = r"^M{0,3}(CM|CD|D?C{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})$" 	# Do not delete 'r'.
import re
print(str(bool(re.match(regex_pattern, input()))))

#validate phone number
import re
[print('YES' if re.match(r'[789]\d{9}$', input()) else 'NO') for _ in range(int(input()))]

$validating Parsing Email address
import re
import email.utils
n=int(input())
email_val=re.compile(r'^[A-Za-z][\w\.-]+@[A-Za-z]+\.[A-Aa-z]{1,3}$')
for _ in range(n):
    parsed = email.utils.parseaddr(input())
    if re.fullmatch(email_val, parsed[1]):
        print(email.utils.formataddr(parsed))

$ validating credit card number
import re

for i in range(int(input())):
    card= input()
    
    try:
        assert re.search(r'^[456]', card)
        assert re.search(r'^(-?\d{4}){4}$', card)
        assert not re.search(r'(\d)(-?\1){3}', card)
        
    except:
        print('Invalid')
    else:
        print('Valid')  

#standadize mobile number
def wrapper(f):
    def fun(l):
        # complete the function
        f(['+91 '+c[-10:-5]+' '+c[-5:] for c in l])
    return fun

# validate Postal code
regex_integer_in_range = r"^([1-9][0-9]{5}$)"	# Do not delete 'r'.
regex_alternating_repetitive_digit_pair = r"(?=(.)(.)(\1))"

#Matrix Script
import math
import os
import random
import re
import sys

first_multiple_input = input().rstrip().split()
n = int(first_multiple_input[0])
m = int(first_multiple_input[1])
matrix = []
t=[]
for _ in range(n):
    matrix_item = input()
    matrix.append(matrix_item)
for i in range(m):
    for j in range(n):
        t.append(matrix[j][i])
s=''.join(t)
path=re.compile(r'\b[ !@#$%&]+\b', re.M)
k=re.sub(path, ' ', s)
print(k)   

#word score
def score_words(words):
    score = 0
    for word in words:
        num_vowels = 0
        for letter in word:
            if is_vowel(letter):
                num_vowels += 1
        if num_vowels % 2 == 0:
            score += 2
        else:
        # Words Score in Python 
            score += 1
        # Words Score in Python 
    return score

#Zeros and Ones
import numpy

n=tuple(map(int, input().split()))

print(numpy.zeros(n, int))
print(numpy.ones(n, int))


#numpy array
import numpy
def arrays(arr):
    return numpy.array(arr[::-1], float)
arr = input().strip().split(' ')
result = arrays(arr)
print(result)
        

                
    




